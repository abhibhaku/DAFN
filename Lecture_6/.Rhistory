setwd("C:/Users/40051/Google Drive/Teaching/ISB/2018/DAFN_2018/DAFN/Lecture_6")
install.packages(c("quantmod", "plyr", "dplyr", "magrittr"))
options(warn = -1)
library(quantmod)
tickers = c("AAPL","MSFT","IBM","CSCO","C")
getSymbols(tickers)
getSymbols("^GSPC")
tickers = c(tickers,"GSPC")
print(head(AAPL))
length(tickers)
for (t in tickers) {
a = get(noquote(t))[,1]
print(c(t,length(a)))
}
df = list()
j = 0
for (t in tickers) {
j = j + 1
a = noquote(t)
b = data.frame(get(a)[,6])
b$dt = row.names(b)
df[[j]] = b
}
stock_table = df[[1]]
for (j in 2:length(df)) {
stock_table = merge(stock_table,df[[j]],by="dt")
}
print(dim(stock_table))
class(stock_table)
par(mfrow=c(3,2))   #Set the plot area to six plots
for (j in 1:length(tickers)) {
plot(as.Date(stock_table[,1]),stock_table[,j+1], type="l",
ylab=tickers[j],xlab="date")
}
par(mfrow=c(1,1))  #Set the plot figure back to a single plot
n = length(stock_table[,1])
rets = stock_table[,2:(length(tickers)+1)]
for (j in 1:length(tickers)) {
rets[2:n,j] = diff(log(rets[,j]))
}
rets$dt = stock_table$dt
rets = rets[2:n,]   #lose the first row when converting to returns
print(head(rets))
class(rets)
summary(rets)
cor(rets[,1:length(tickers)])
library(corrgram)
corrgram(rets[,1:length(tickers)], order=TRUE, lower.panel=panel.ellipse,
upper.panel=panel.pts, text.panel=panel.txt)
install.packages("corrgram")
library(corrgram)
corrgram(rets[,1:length(tickers)], order=TRUE, lower.panel=panel.ellipse,
upper.panel=panel.pts, text.panel=panel.txt)
cor(rets[,1:length(tickers)])
library(corrgram)
install.packages("Rcpp")
library(corrgram)
corrgram(rets[,1:length(tickers)], order=TRUE, lower.panel=panel.ellipse,
upper.panel=panel.pts, text.panel=panel.txt)
library(corrgram)
library(bindrcpp)
library(Rcpp)
install.packages("bindrcpp")
library(Rcpp)
library(corrgram)
corrgram(rets[,1:length(tickers)], order=TRUE, lower.panel=panel.ellipse,
upper.panel=panel.pts, text.panel=panel.txt)
betas = NULL
for (j in 1:(length(tickers)-1)) {
res = lm(rets[,j]~rets[,6])
betas[j] = res$coefficients[2]
}
print(betas)
betas = matrix(betas)
avgrets = colMeans(rets[,1:(length(tickers)-1)])
res = lm(avgrets~betas)
print(summary(res))
plot(betas,avgrets)
abline(res,col="red")
tickers = read.table("DSTMAA_data/tickers.csv",header=FALSE,sep=":")
install.packages("DT")
install.packages("shiny")
install.packages("ggplot2")
install.packages("plotly")
install.packages("rbokeh")
shiny::runApp()
q()
